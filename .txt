1. Включить дрон
2. Войти с помощью расширения
3. Прописать если первый запуск дрона screen -x odom
4. Пароль orangepi
5. Запускать из папки ls d.Panchenko/hp5
6. Запускать python main.py
7. соединение с помощью расширения прописав ssh -XC orangepi@192.168.1.127

На дроне
Проблемы из-за которых уменьшается время выполнения кода = fps:
	1) Увеличение количества обнаруживаемых ключевых точек
При стабильной сцене алгоритм может обнаруживать стабильное или даже меньшее число ключевых точек, а резкие движения (или появление новых объектов, размытие) приводят к тому, что детектор генерирует больше кандидатов. Это увеличивает время на этапах обнаружения, описания и сопоставления точек.
	2) Увеличение числа итераций в алгоритме RANSAC
Резкие движения могут привести к большему количеству несоответствий между кадрами. Алгоритм поиска гомографии (например, с RANSAC) может потребовать больше итераций для нахождения корректного преобразования, что существенно увеличивает время обработки.
	3) Повышенная сложность вычислений при обработке изменяющихся изображений
Если кадры резко меняются, этапы, связанные с преобразованием (поворот, ремаппинг, обрезка), могут работать дольше из-за отсутствия устойчивых признаков и необходимости обработки "сложного" изображения с большим количеством деталей или размытостей.

Как итог, можно сделать:
	Отслеживание признаков между кадрами:
Вместо того чтобы выполнять полный вызов detect_and_compute для каждого кадра, можно использовать алгоритм оптического потока (например, cv2.calcOpticalFlowPyrLK) для отслеживания уже обнаруженных ключевых точек. Если между кадрами изменения не слишком сильны, можно обновлять позиции точек быстрее и дешевле, а полный детектор запускать реже (например, каждые N кадров).
	Адаптивное уменьшение числа признаков:
Если резкое движение обнаружено (например, по увеличению разницы между кадрами или по изменению количества сопоставляемых точек), можно динамически уменьшать параметр top_k или повышать detection_threshold, чтобы ограничить число обнаруживаемых точек. Это снизит нагрузку на вычисление дескрипторов и сопоставление.
	Пропуск детекции на некоторых кадрах:
Если система обнаруживает резкое движение, можно пропускать детекцию в некоторых кадрах (например, не выполнять detect_and_compute для каждого кадра, а лишь периодически, когда качество отслеживания ухудшается).


На компьютере
1) сохранить константы при преобразовании vio координат до gps


Чтобы профилировать код на дроне, нужно
1. создать отчет
nsys profile -t nvtx,osrt --force-overwrite=true --trace-fork-before-exec=true --stats=true --output=report_temp python main.py
!!!ВАЖНО!!!
При запуске программы, нажать ctrl + c только 2 раза, потом ждать формирования отчета
2. перенести файл на компьютер
scp orangepi@192.168.1.127:~/d.Panchenko/hp5/report_temp.* ~/My_Folder/reports_dron/