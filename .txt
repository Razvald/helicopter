1. Включить дрон
2. Войти с помощью расширения
3. Прописать если первый запуск дрона screen -x odom
4. Пароль orangepi
5. Запускать из папки ls d.Panchenko/hp5
6. Запускать python main.py
7. соединение с помощью расширения прописав ssh -XC orangepi@192.168.1.127

На компьютере
1) сохранить константы при преобразовании vio координат до gps


Чтобы профилировать код на дроне, нужно
1. создать отчет
nsys profile -t nvtx,osrt --force-overwrite=true --trace-fork-before-exec=true --stats=true --output=report_temp python main.py
!!!ВАЖНО!!!
При запуске программы, нажать ctrl + c только 2 раза, потом ждать формирования отчета
2. перенести файл на компьютер
scp orangepi@192.168.1.127:~/d.Panchenko/hp5/report_temp.* ~/My_Folder/reports_dron/


1) Сохранить константы при преобразовании vio координат до gps


04.03 - Используя сайт https://syntha.ai/optimizers/python я смог оптимизировать такие участки кода:
1. Сделать копию файла vio_ort_nvtx, так как его функции также нагружают систему
2. Параметры (CENTER) рассчитываются сразу как NumPy-массив с корректировкой, что позволяет избежать лишних преобразований.
3. Маска (MASK) создаётся аналогично, но используется по всему коду без повторного вычисления.
4. Вместо использования Pillow для поворота применяется функция cv2.warpAffine (через cv2.getRotationMatrix2D), что снижает накладные расходы.
5. Сокращено количество промежуточных преобразований (например, лишних вызовов np.asarray), что сокращает время обработки каждого кадра.
6. Создан документ-отчет, содержащий данные анализа между оптимизированным кодом и оригинальным

Планы которые нужно сделать 05.03:
1) Используя оригинальный код vio_ort, сравнивать каждое новое изменение по сравнению с новым оптимизированным. Определить что именно добавляет к погрешности координат

))))))))))))))
Начало отчета
Засечем стандарты
))import vio_ort_org as vio_ort_original
)count_json = 100
Execution time for org: 10.23 seconds
Errors for Original VIO:
  Latitude RMSE: 0.0002518033
  Longitude RMSE: 0.0001586097

)count_json = 700
Execution time for org: 52.24 seconds
Errors for Original VIO:
  Latitude RMSE: 0.0001740886
  Longitude RMSE: 0.0001749469

))import vio_ort_org_copy as vio_ort_original
)count_json = 100
Execution time for org: 11.33 seconds
Errors for Original VIO:
  Latitude RMSE: 0.0002518033
  Longitude RMSE: 0.0001586097

)count_json = 700
Execution time for org: 54.97 seconds
Errors for Original VIO:
  Latitude RMSE: 0.0001740886
  Longitude RMSE: 0.0001749469


)))Теперь начнем с изменениями

)))1. Изменить
from PIL import Image
rotated = Image.fromarray(frame).rotate(angles['yaw']/np.pi*180, center=dpp)

))На
M = cv2.getRotationMatrix2D(dpp, angles['yaw'] / np.pi * 180, 1)
rotated = cv2.warpAffine(frame, M, (frame.shape[1], frame.shape[0]))

))Как итог, погрешность составляет:
Mean 100 Latitude Difference (Optimized VIO - Original VIO): −0,000000005
Mean 700 Latitude Difference (Optimized VIO - Original VIO): 0,000000223
Mean 100 Longitude Difference (Optimized VIO - Original VIO): −0,000000085
Mean 700 Longitude Difference (Optimized VIO - Original VIO): −0,0000009

))2. Изменить
HoM, mask = cv2.findHomography(mkpts_0, mkpts_1, cv2.RANSAC, HOMO_THR)

))На
HoM, mask = cv2.findHomography(mkpts_0, mkpts_1, cv2.RANSAC, HOMO_THR, maxIters=500)

))Как итог, погрешность составляет:
Mean 100 Latitude Difference (Optimized VIO - Original VIO): −0,000000009
Mean 700 Latitude Difference (Optimized VIO - Original VIO): 0,000000176
Mean 100 Longitude Difference (Optimized VIO - Original VIO): −0,000000113
Mean 700 Longitude Difference (Optimized VIO - Original VIO): −0,000000846



))3. Изменить
def __init__(self, lat0=0, lon0=0, alt0=0, top_k=512, detection_threshold=0.05):

))На
def __init__(self, lat0=0, lon0=0, alt0=0, top_k=256, detection_threshold=0.05):

))Как итог, погрешность составляет:
Mean 100 Latitude Difference (Optimized VIO - Original VIO): −0,000000017
Mean 700 Latitude Difference (Optimized VIO - Original VIO): −0,000000105
Mean 100 Longitude Difference (Optimized VIO - Original VIO): −0,000000127
Mean 700 Longitude Difference (Optimized VIO - Original VIO): −0,00000133


))4. Изменить
def __init__(self, lat0=0, lon0=0, alt0=0, top_k=512, detection_threshold=0.05):

))На
def __init__(self, lat0=0, lon0=0, alt0=0, top_k=256, detection_threshold=0.01):

))Как итог, погрешность составляет:
Mean 100 Latitude Difference (Optimized VIO - Original VIO): −0,000000017
Mean 700 Latitude Difference (Optimized VIO - Original VIO): −0,000000098
Mean 100 Longitude Difference (Optimized VIO - Original VIO): −0,000000127
Mean 700 Longitude Difference (Optimized VIO - Original VIO): −0,000001341


))5. Изменить
def __init__(self, lat0=0, lon0=0, alt0=0, top_k=512, detection_threshold=0.05):

))На
def __init__(self, lat0=0, lon0=0, alt0=0, top_k=512, detection_threshold=0.01):

))Как итог, погрешность составляет:
Mean 100 Latitude Difference (Optimized VIO - Original VIO): −0,000000017
Mean 700 Latitude Difference (Optimized VIO - Original VIO): 0,00000004
Mean 100 Longitude Difference (Optimized VIO - Original VIO): −0,000000127
Mean 700 Longitude Difference (Optimized VIO - Original VIO): −0,000000061


))При последующих проверках значения не менялись, следовательно все изменения стоит обратить к оригинальному коду, помимо:
)   def __init__(self, lat0=0, lon0=0, alt0=0, top_k=512, detection_threshold=0.05):

)  rotated = Image.fromarray(frame).rotate(angles['yaw']/np.pi*180, center=dpp)

)  HoM, mask = cv2.findHomography(mkpts_0, mkpts_1, cv2.RANSAC, HOMO_THR)


)-)-)-)Как итог, заменяем vio_ort_org из vio_ort_org_copy.
Запустив сверку, были получены данные значения
import vio_ort as vio_ort
import vio_ort_org as vio_ort_original
count_json = 100
Test start for cache: 8.41 seconds
Execution time for opt: 8.20 seconds
Execution time for org: 11.06 seconds
Errors for Optimized VIO:
  Latitude RMSE: 0.0002538565
  Longitude RMSE: 0.0001441549
Errors for Original VIO:
  Latitude RMSE: 0.0002518033
  Longitude RMSE: 0.0001586097

Mean Latitude Difference (Optimized VIO - Original VIO): 0.0000020542
Mean Longitude Difference (Optimized VIO - Original VIO): -0.0000144786


count_json = 700
Test start for cache: 56.89 seconds
Execution time for opt: 53.96 seconds
Execution time for org: 64.39 seconds
Errors for Optimized VIO:
  Latitude RMSE: 0.0002669317
  Longitude RMSE: 0.0003151589
  Altitude RMSE: 884.1420737381
Errors for Original VIO:
  Latitude RMSE: 0.0001740886
  Longitude RMSE: 0.0001749469
  Altitude RMSE: 884.1420737381

Mean Latitude Difference (Optimized VIO - Original VIO): 0.0001046406
Mean Longitude Difference (Optimized VIO - Original VIO): -0.0002353191


)))06.03
Я начну заново проверять погрешности для каждого из сценариев, а именно:
))1. Изменить
from PIL import Image
rotated = Image.fromarray(frame).rotate(angles['yaw']/np.pi*180, center=dpp)

)На
M = cv2.getRotationMatrix2D(dpp, angles['yaw'] / np.pi * 180, 1)
rotated = cv2.warpAffine(frame, M, (frame.shape[1], frame.shape[0]))

))2. Изменить
HoM, mask = cv2.findHomography(mkpts_0, mkpts_1, cv2.RANSAC, HOMO_THR)

)На
HoM, mask = cv2.findHomography(mkpts_0, mkpts_1, cv2.RANSAC, HOMO_THR, maxIters=500)

))3. Изменять значения
def __init__(self, lat0=0, lon0=0, alt0=0, top_k=512, detection_threshold=0.05):

)На
def __init__(self, lat0=0, lon0=0, alt0=0, top_k=512, detection_threshold=0.01):
)На
def __init__(self, lat0=0, lon0=0, alt0=0, top_k=256, detection_threshold=0.05):
)На
def __init__(self, lat0=0, lon0=0, alt0=0, top_k=256, detection_threshold=0.01):



Для наглядности я буду вести запись с дистанцией 1000. 
1. Заменяем PIL на cv2
