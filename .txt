1. Включить дрон
2. Войти с помощью расширения
3. Прописать если первый запуск дрона screen -x odom
4. Пароль orangepi
5. Запускать из папки ls d.Panchenko/hp5
6. Запускать python main.py
7. соединение с помощью расширения прописав ssh -XC orangepi@192.168.1.127

На компьютере
1) сохранить константы при преобразовании vio координат до gps


Чтобы профилировать код на дроне, нужно
1. создать отчет
nsys profile -t nvtx,osrt --force-overwrite=true --trace-fork-before-exec=true --stats=true --output=report_temp python main.py
!!!ВАЖНО!!!
При запуске программы, нажать ctrl + c только 2 раза, потом ждать формирования отчета
2. перенести файл на компьютер
scp orangepi@192.168.1.127:~/d.Panchenko/hp5/report_temp.* ~/My_Folder/reports_dron/


1) Сохранить константы при преобразовании vio координат до gps


04.03 - Используя сайт https://syntha.ai/optimizers/python я смог оптимизировать такие участки кода:
1. Сделать копию файла vio_ort_nvtx, так как его функции также нагружают систему
2. Параметры (CENTER) рассчитываются сразу как NumPy-массив с корректировкой, что позволяет избежать лишних преобразований.
3. Маска (MASK) создаётся аналогично, но используется по всему коду без повторного вычисления.
4. Вместо использования Pillow для поворота применяется функция cv2.warpAffine (через cv2.getRotationMatrix2D), что снижает накладные расходы.
5. Сокращено количество промежуточных преобразований (например, лишних вызовов np.asarray), что сокращает время обработки каждого кадра.
6. Создан документ-отчет, содержащий данные анализа между оптимизированным кодом и оригинальным

Планы которые нужно сделать 05.03:
1) Используя оригинальный код vio_ort, сравнивать каждое новое изменение по сравнению с новым оптимизированным. Определить что именно добавляет к погрешности координат

))))))))))))))
Начало отчета
Засечем стандарты
))import vio_ort_org as vio_ort_original
)count_json = 100
Execution time for org: 10.23 seconds
Errors for Original VIO:
  Latitude RMSE: 0.0002518033
  Longitude RMSE: 0.0001586097
  Altitude RMSE: 1052.1405522614

)count_json = 700
Execution time for org: 52.24 seconds
Errors for Original VIO:
  Latitude RMSE: 0.0001740886
  Longitude RMSE: 0.0001749469
  Altitude RMSE: 884.1420737381

))import vio_ort_org_copy as vio_ort_original
)count_json = 100
Execution time for org: 11.33 seconds
Errors for Original VIO:
  Latitude RMSE: 0.0002518033
  Longitude RMSE: 0.0001586097
  Altitude RMSE: 1052.1405522614

)count_json = 700
Execution time for org: 54.97 seconds
Errors for Original VIO:
  Latitude RMSE: 0.0001740886
  Longitude RMSE: 0.0001749469
  Altitude RMSE: 884.1420737381


)))Теперь начнем с изменениями

import vio_ort_org as vio_ort_original
1. Изменить
from PIL import Image
rotated = Image.fromarray(frame).rotate(angles['yaw']/np.pi*180, center=dpp)
На
M = cv2.getRotationMatrix2D(dpp, angles['yaw'] / np.pi * 180, 1)
        rotated = cv2.warpAffine(frame, M, (frame.shape[1], frame.shape[0]))


В одиночном способе
count_json = 1000
Execution time for org: 56.50 seconds
Errors for Original VIO:
  Latitude RMSE: 0.0001740886
  Longitude RMSE: 0.0001749469
  Altitude RMSE: 884.1420737381

В сравнении
